#+title: Readme

* Tic Tac Toe
A simple game of tic tac toe.

* History
** Day 1 :ARCHIVE:
Attempted to work on tarati-react.
** Day 2 Tic Tac Toe
:LOGBOOK:
CLOCK: [2025-09-23 Tue 11:15]--[2025-09-23 Tue 11:40] =>  0:25
CLOCK: [2025-09-23 Tue 10:00]--[2025-09-23 Tue 11:15] =>  1:15
:END:
*** TODO Display Board
- [X] Style the main page so tic-tac-toe grid doesn’t look ugly
  - [X] Use tailwind
  - [X] What is CSS..? What is tailwind..?
*** Create Gamestate
:LOGBOOK:
CLOCK: [2025-09-23 Tue 13:15]--[2025-09-23 Tue 16:32] =>  3:17
CLOCK: [2025-09-23 Tue 14:20]--[2025-09-23 Tue 15:12] =>  0:52
CLOCK: [2025-09-23 Tue 11:46]--[2025-09-23 Tue 12:39] =>  0:53
:END:
Pom 1: Created some states.
Pom 2: Define the function makeMove.
- [X] Now we need a model for how Tic Tac Toe works:
  - [X] Create tictactoe.ts
  - [X] Define a type GameState that can represent everything about a tic-tac-toe game
- [X] Add a function called makeMove that takes a game + player + move location and returns a new GameState

*** Attach to visuals
:LOGBOOK:
CLOCK: [2025-09-23 Tue 18:30]--[2025-09-23 Tue 19:45] =>  1:15
CLOCK: [2025-09-23 Tue 16:45]--[2025-09-23 Tue 18:13] =>  1:28
:END:
- [X] Wire up GameState and makeMove into your React component
- [X] Add detection of winners
   bruhhhhhhhhhhhh.
- [X] Add move validation (can’t make moves after a win)
*** Questions
- [X] Don’t forget to write in #eod
** Day 3 Express Server
*** Docset Skills
=SPC s k= lookup in docsets
=SPC s K= lookup in all docsets

=K= is always reliable =+lookup/documentation= aka =SPC c k=

=SPC c d= lookup definition
=SPC c D= lookup *references* (uses of symbol)
- Also try =evil-goto-definition=

=SPC s o= is lookup /online/. Queries the browser on high quality documentation sources ala =K=

=g ;= and =g ,= are =evil-goto-last-change=

make sure to activate docsets before using dash-doc features?

*** Morning Tasks
:LOGBOOK:
CLOCK: [2025-09-24 Wed 11:24]--[2025-09-24 Wed 11:49] =>  0:25
:END:
- [X] show celebration
  In order to show a celebration, we already have a console displaying.
  - [X] So I just need to add a display on the html
  - [X] and then separate out the display text to an independent component
  - [X] Merge Current Player message into Celebration too

- [ ] Modify error handling message dispatch for wrong player?
  - [ ] This is not too relevant at the moment, But I can look up the proper "error display" / throw exception display feature.

- [X] Modify error handling for wrong target to return current gamestate
  - [X] i can leave this as is.

*** Lunch
*** Afternoon Tasks
:LOGBOOK:
CLOCK: [2025-09-24 Wed 17:40]--[2025-09-24 Wed 18:40] =>  1:00
CLOCK: [2025-09-24 Wed 16:30]--[2025-09-24 Wed 17:31] =>  1:01
CLOCK: [2025-09-24 Wed 15:25]--[2025-09-24 Wed 16:26] =>  1:01
CLOCK: [2025-09-24 Wed 15:00]--[2025-09-24 Wed 15:25] =>  0:25
:END:
spin off to dev-express-server
- [X] Set up Vite-Express on your existing tic-tac-toe app
- [X] Modify bun run dev to run server.ts
  - I [[https://github.com/szymmis/vite-express?tab=readme-ov-file#fresh-setup-with-create-vite][followed this procedure]] which allowed me to install packages.
  - Then I modified package.json to run
    : "dev": "bun run --watch ./src/server/main.ts"
    And since that particular script has ViteExpress in, it re-routes all un-specified routes to the client code that would normally run when you call ~vite~
- [X] Separate code into =src/client= and =src/server= sub-folders

feat 1a: in-memory
- [X] Add a /game (GET) and /move (POST) endpoints
- [X] move makeMove to the server, manage the game state in-memory
merge to server-setup

feat 1b:
[[file:~/Documents/org/30-fractal/convos/20250924--ttt-tanstack-react-query__gpt5.org][I laid out my step-by-step plan here.]]
- [X] Use React Query and fetch to read and write game data via a server. Following the simple example, here's how I see the steps.
  - [X] Implement something concrete
    - [X] Implement a straightforward axios get & post request to the server in =Game=
    - [X] Extract it to a separate =services= folder and import it to =Game=. Let's say it's ~getGame~ and ~postMove~
  - [X] Adapt it to react-query
    - [X] Create =queryClient= in =App=, wrap the =Game= in =QueryClientProvider=.
    - [X] in =Game=, ~const queryClient = useQueryClient~.
      - [X] For the get
        : const query = useQuery({queryKey: ['game'], queryFn: getGame})
        - q :: But what is this querykey referring to? Is it an internal react-query variable, that react-query tracks behind the scenes to help manage async/server-sync difficulties? it's just a label for caching?
    - [X] For the post
            [[https://tanstack.com/query/latest/docs/framework/react/examples/offline?path=examples%2Freact%2Foffline%2Fsrc%2Fapi.ts][Look at this React example.]]
      - [X] Modify ~postMove~ to have only one parameter containing all necessary data.
      - Also, a mutationFn must return /a promise/ without a callback - but whose callback would be
            : res => res.data

      #+begin_example js
      const mutation = useMutation({
        mutationFn: () => axios.post('/move', {player, target}),
        onSuccess: () => {
          // Invalidate and refetch
          queryClient.invalidateQueries({ queryKey: ['game'] })
        },
      })
      #+end_example

    - [X] Modify =Game='s JSX return content.... I'm not quite sure how to deal with that. It seems that from the example, we're replacing the functionality of =useState= and =useEffect= with =useQuery= instead.
      - q :: What is this questionmark notation in  ~query.data?.map~ ? =query= is returned from ~useQuery~, so it seems to be a unique property? or is it built into javascript? I recall seeing something that used an exclamation mark as a part of the JS syntactical sugar, but I can't recall the details.
      - I am using =gamestate= in three different div tags, which are each siblings and a child of the <div id="game". But I don't see a clear analogous situation in that simple example.
        - =board= displaying the rows
        - sending to Celebration
        - displaying the history.
      - [X] The answer is by /conditional rendering/ using the deconstructed values of =useQuery=.

End of "morning"
- [X] Goal State:
  - [X] your game has identical functionality, but all game state is managed by the server
  - [X] game state persists if you refresh the tab, but not if you restart the server
merge to main

*** Questions

- [X] q :: What is this questionmark notation in  ~query.data?.map~ ? =query= is returned from ~useQuery~, so it seems to be a unique property? or is it built into javascript? I recall seeing something that used an exclamation mark as a part of the JS syntactical sugar, but I can't recall the details.
  - Optional chaining ?. is JavaScript. It safely accesses a property that might be undefined/null. query.data?.map runs only if query.data exists. The exclamation you remember is TypeScript’s non-null assertion (value!), not JavaScript.

** Day 4
:LOGBOOK:
CLOCK: [2025-09-25 Thu 20:50]--[2025-09-25 Thu 21:36] =>  0:46
CLOCK: [2025-09-25 Thu 20:10]--[2025-09-25 Thu 20:49] =>  0:39
CLOCK: [2025-09-25 Thu 17:49]--[2025-09-25 Thu 18:14] =>  0:25
CLOCK: [2025-09-25 Thu 15:40]--[2025-09-25 Thu 16:05] =>  0:25
CLOCK: [2025-09-25 Thu 15:00]--[2025-09-25 Thu 15:25] =>  0:25
CLOCK: [2025-09-25 Thu 11:23]--[2025-09-25 Thu 12:07] =>  0:44
CLOCK: [2025-09-25 Thu 10:50]--[2025-09-25 Thu 11:23] =>  0:25
CLOCK: [2025-09-25 Thu 10:10]--[2025-09-25 Thu 10:50] =>  0:40
:END:

pom 1: plan the work out, understand scope
pom 2: add games Map, and gameID to GET /game query variable
pom 3: add gameID to POST /move, add /create
lunch
mark lecture on enginering 101
1:1 w paris; coffee; pull server into main
pom 4 (3 pm): study lyra's css; plan out new frontend structure
3:30 - 4:20: uhh. flounder?
4:20 - 5:10 swing! and nap.
5:10 - 5:50 clarify and talk w claude
pom 5 (5:50 pm): implement conditional rendering.
pom 6 (8:10 - 8:50): got lobby entering game working!
pom 7: get functionality returning to normal!

- [X] Now we need to support multiple games.
  new feature branch: =dev-multigame-server=


client-code has ~window.crypto.randomUUID()~, but node.js (server) has
: import crypto from "crypto"
: crypto.randomUUID()

- [X] Add game ID to the GameState model
- [X] Add game ID to GET /game
- [X] and POST /move
- [X] Add a list of games: GET /games and a create game endpoint: /create
  merge to main?

- [X] Now we need to allow a user to pick a game:
  from main, new feature branch =dev-multigame-react=
  - [X] new Lobby component
  - [X] Conditional rendering in App between Lobby vs. Game
    - [X] Create game, enter game in Lobby
    - [X] Back-button in Game
  - [X] Add a new "pick/create game" component that displays initially
  - [X] Once a game ID is selected, display the normal tic-tac-toe component

- [X] Goal State:
  - [X] your game allows users to join an existing game or start a new one
  - [X] each tic-tac-toe game functions as normal (detects winners, ties, etc.)
  - [X] states persist between chrome tab refreshes, but not server restarts

** Day 5
:LOGBOOK:
CLOCK: [2025-09-26 Fri 23:00]--[2025-09-26 Fri 23:31] =>  0:31
CLOCK: [2025-09-26 Fri 20:45]--[2025-09-26 Fri 22:57] =>  2:12
CLOCK: [2025-09-26 Fri 18:08]--[2025-09-26 Fri 19:02] =>  0:54
CLOCK: [2025-09-26 Fri 17:43]--[2025-09-26 Fri 18:08] =>  0:25
CLOCK: [2025-09-26 Fri 17:00]--[2025-09-26 Fri 17:39] =>  0:39
CLOCK: [2025-09-26 Fri 16:05]--[2025-09-26 Fri 16:40] =>  0:35
CLOCK: [2025-09-26 Fri 15:40]--[2025-09-26 Fri 16:05] =>  0:25
CLOCK: [2025-09-26 Fri 14:30]--[2025-09-26 Fri 15:20] =>  0:50
CLOCK: [2025-09-26 Fri 12:00]--[2025-09-26 Fri 12:33] =>  0:33
CLOCK: [2025-09-26 Fri 10:50]--[2025-09-26 Fri 11:45] =>  0:55
CLOCK: [2025-09-26 Fri 10:14]--[2025-09-26 Fri 10:38] =>  0:24
CLOCK: [2025-09-26 Fri 09:30]--[2025-09-26 Fri 10:04] =>  0:34
:END:

pomodoros
- pom 1: Preparing today's notes, setting intentions, tutor context, task breakdown.
- pom 2: polling, conditional polling
- lecture: db, drizzle
- pom 3: set up supabase; follow drizzle tutorial, get conflicting info
- chatted w eqan a bit
- pom 4: clarify mental model with drizzle-supabase; found better tutorial and notified cohort :)
- 12:30-1:20 grab lunch
- 1:30 - 2:30 helping Hyun Joo?
- pom 5: brainstorm schema
- pom 6: draft schema in code
- pom 7: replace provided usertest querying with game querying
- pom 8: migrate server =/games= to db call
- pom 9/10: attempting to fix the remaining two routes
- 8:45-10: implement the remaining routes?
- 11-11:40: remove history from type GameState
  .... it works, but oh my god it's SLOW 😱

Weaver's note to self:
#+begin_quote
Friend, this is a messy pull request. I would have appreciated several smaller pull requests into a separate dev-db-migration branch. But it's functional.

But -- why the hell is it so slow? Is that your code or is that Supabase? Don't you want to add an "optimistic" client code?
#+end_quote


goals
- [X] Polling: 20–30 min 1 pom
- [X] DB (MVP): 60–90 min 4 poms (actual: 12 poms)

*** Polling

- Since you’re already on React Query, using setInterval in the component is brittle (cleanup, double intervals, stale closures, multiple tabs). React Query can poll for you via query options, tied to tab visibility.
- Concept: make the game query refetch itself every N ms while the game is ongoing. Stop when status is winner/draw, or when the component unmounts.
- Sanity checks:
  - What interval feels responsive but not spammy (e.g., 1–2s)?
  - What happens in two tabs if both poll and both try to move at once? Where is “turn validity” enforced?
- [X] Set refetchInterval
  #+begin_example
refetchInterval: number | false | ((query: Query) => number | false | undefined)
Optional
If set to a number, all queries will continuously refetch at this frequency in milliseconds
If set to a function, the function will be executed with the query to compute a frequency
  #+end_example

  Oh, okay. That's super simple. But I need to conditionally disable polling when the game is over.

*** DB MVP
- [X] Create a Supabase project; copy the Postgres connection string. Keep secrets in .env and out of git.
- [X] Install Drizzle + a Postgres driver (e.g., postgres.js or node-postgres). Connect with SSL and (ideally) the pooled connection (pgBouncer) in Supabase.
- [X] Add ~bunx tsx src/index.ts~ to bun script ~bun run s-push / s-migrate / s-test~
- [ ] Write schema.ts (tables for your app).
- [ ] Run drizzle-kit generate to produce a migration, then drizzle-kit migrate to apply it.
- [ ] Replace your in-memory Map operations in Express routes with Drizzle queries/updates.
- [ ] Frontend stays the same (React Query still hits your API). Now the state survives server restarts.
- [X] Sign up for Supabase; save URL and PW.


  A) Single games table: columns for game_id (PK), player (current turn), board (JSONB), status (text/enum), history (JSONB).
     - Pros: fastest to ship; mirrors your GameState; perfect for demo; supports replay easily.
     - Cons: less relational, but fine for now.
  B) games + moves tables:
     - Pros: relational, scalable; easier to query history.
     - Cons: more migration/queries today.
- For demo speed, I recommend A today; you can refactor to B later.


- [ ] Draft a DB Schema
  - [ ] Set up Schema with Drizzle

**** Set up drizzle
❗ Dont' follow steps 1-4 here: https://orm.drizzle.team/docs/get-started/supabase-new

Install packages
#+begin_example bash
bun add drizzle-orm postgres dotenv
bun add -D drizzle-kit tsx
#+end_example

Set up .env file with supabase url & key
Add the basic src/index.ts, src/db/schema.ts, and ./drizzle.config.ts files

stop any vite processes then
Apply changes to the db:
#+begin_example
bunx drizzle-kit push
#+end_example

Hmm, some sort of timeout.
I found this alternative guide here:

https://supabase.com/docs/guides/database/drizzle

And it works! Sweet! Step 6 onwards now..
#+begin_example
bunx drizzle-kit push
#+end_example

And I can see the changes updated.

Some tasks I can perform:
https://orm.drizzle.team/docs/kit-overview
#+begin_example bash
bunx drizzle-kit generate
bunx drizzle-kit migrate
bunx drizzle-kit push
bunx drizzle-kit pull
bunx drizzle-kit check
bunx drizzle-kit up
bunx drizzle-kit studio
#+end_example

**** Write tables for Tic Tac Toe

** Day 6
Demos begin at 1 PM.

- Aesthetics: 30–45 min 2 poms
- Demo feature: 45–60 min 2-3 poms

Stretch goals
- Websockets
- Self-hosted VPS Hetzner w/ Postgres Docker?
