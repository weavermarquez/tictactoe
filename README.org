#+title: Readme

* Tic Tac Toe
A simple game of tic tac toe.

* History
** Day 1 :ARCHIVE:
Attempted to work on tarati-react.
** Day 2 Tic Tac Toe
:LOGBOOK:
CLOCK: [2025-09-23 Tue 11:15]--[2025-09-23 Tue 11:40] =>  0:25
CLOCK: [2025-09-23 Tue 10:00]--[2025-09-23 Tue 11:15] =>  1:15
:END:
*** TODO Display Board
- [X] Style the main page so tic-tac-toe grid doesn’t look ugly
  - [X] Use tailwind
  - [X] What is CSS..? What is tailwind..?
*** Create Gamestate
:LOGBOOK:
CLOCK: [2025-09-23 Tue 13:15]--[2025-09-23 Tue 16:32] =>  3:17
CLOCK: [2025-09-23 Tue 14:20]--[2025-09-23 Tue 15:12] =>  0:52
CLOCK: [2025-09-23 Tue 11:46]--[2025-09-23 Tue 12:39] =>  0:53
:END:
Pom 1: Created some states.
Pom 2: Define the function makeMove.
- [X] Now we need a model for how Tic Tac Toe works:
  - [X] Create tictactoe.ts
  - [X] Define a type GameState that can represent everything about a tic-tac-toe game
- [X] Add a function called makeMove that takes a game + player + move location and returns a new GameState

*** Attach to visuals
:LOGBOOK:
CLOCK: [2025-09-23 Tue 18:30]--[2025-09-23 Tue 19:45] =>  1:15
CLOCK: [2025-09-23 Tue 16:45]--[2025-09-23 Tue 18:13] =>  1:28
:END:
- [X] Wire up GameState and makeMove into your React component
- [X] Add detection of winners
   bruhhhhhhhhhhhh.
- [X] Add move validation (can’t make moves after a win)
*** Questions
- [X] Don’t forget to write in #eod
** Day 3 Express Server
*** Docset Skills
=SPC s k= lookup in docsets
=SPC s K= lookup in all docsets

=K= is always reliable =+lookup/documentation= aka =SPC c k=

=SPC c d= lookup definition
=SPC c D= lookup *references* (uses of symbol)
- Also try =evil-goto-definition=

=SPC s o= is lookup /online/. Queries the browser on high quality documentation sources ala =K=

=g ;= and =g ,= are =evil-goto-last-change=

make sure to activate docsets before using dash-doc features?

*** Morning Tasks
:LOGBOOK:
CLOCK: [2025-09-24 Wed 11:24]--[2025-09-24 Wed 11:49] =>  0:25
:END:
- [X] show celebration
  In order to show a celebration, we already have a console displaying.
  - [X] So I just need to add a display on the html
  - [X] and then separate out the display text to an independent component
  - [X] Merge Current Player message into Celebration too

- [ ] Modify error handling message dispatch for wrong player?
  - [ ] This is not too relevant at the moment, But I can look up the proper "error display" / throw exception display feature.

- [X] Modify error handling for wrong target to return current gamestate
  - [X] i can leave this as is.

*** Lunch
*** Afternoon Tasks
:LOGBOOK:
CLOCK: [2025-09-24 Wed 17:40]--[2025-09-24 Wed 18:40] =>  1:00
CLOCK: [2025-09-24 Wed 16:30]--[2025-09-24 Wed 17:31] =>  1:01
CLOCK: [2025-09-24 Wed 15:25]--[2025-09-24 Wed 16:26] =>  1:01
CLOCK: [2025-09-24 Wed 15:00]--[2025-09-24 Wed 15:25] =>  0:25
:END:
spin off to dev-express-server
- [X] Set up Vite-Express on your existing tic-tac-toe app
- [X] Modify bun run dev to run server.ts
  - I [[https://github.com/szymmis/vite-express?tab=readme-ov-file#fresh-setup-with-create-vite][followed this procedure]] which allowed me to install packages.
  - Then I modified package.json to run
    : "dev": "bun run --watch ./src/server/main.ts"
    And since that particular script has ViteExpress in, it re-routes all un-specified routes to the client code that would normally run when you call ~vite~
- [X] Separate code into =src/client= and =src/server= sub-folders

feat 1a: in-memory
- [X] Add a /game (GET) and /move (POST) endpoints
- [X] move makeMove to the server, manage the game state in-memory
merge to server-setup

feat 1b:
[[file:~/Documents/org/30-fractal/convos/20250924--ttt-tanstack-react-query__gpt5.org][I laid out my step-by-step plan here.]]
- [X] Use React Query and fetch to read and write game data via a server. Following the simple example, here's how I see the steps.
  - [X] Implement something concrete
    - [X] Implement a straightforward axios get & post request to the server in =Game=
    - [X] Extract it to a separate =services= folder and import it to =Game=. Let's say it's ~getGame~ and ~postMove~
  - [X] Adapt it to react-query
    - [X] Create =queryClient= in =App=, wrap the =Game= in =QueryClientProvider=.
    - [X] in =Game=, ~const queryClient = useQueryClient~.
      - [X] For the get
        : const query = useQuery({queryKey: ['game'], queryFn: getGame})
        - q :: But what is this querykey referring to? Is it an internal react-query variable, that react-query tracks behind the scenes to help manage async/server-sync difficulties? it's just a label for caching?
    - [X] For the post
            [[https://tanstack.com/query/latest/docs/framework/react/examples/offline?path=examples%2Freact%2Foffline%2Fsrc%2Fapi.ts][Look at this React example.]]
      - [X] Modify ~postMove~ to have only one parameter containing all necessary data.
      - Also, a mutationFn must return /a promise/ without a callback - but whose callback would be
            : res => res.data

      #+begin_example js
      const mutation = useMutation({
        mutationFn: () => axios.post('/move', {player, target}),
        onSuccess: () => {
          // Invalidate and refetch
          queryClient.invalidateQueries({ queryKey: ['game'] })
        },
      })
      #+end_example

    - [X] Modify =Game='s JSX return content.... I'm not quite sure how to deal with that. It seems that from the example, we're replacing the functionality of =useState= and =useEffect= with =useQuery= instead.
      - q :: What is this questionmark notation in  ~query.data?.map~ ? =query= is returned from ~useQuery~, so it seems to be a unique property? or is it built into javascript? I recall seeing something that used an exclamation mark as a part of the JS syntactical sugar, but I can't recall the details.
      - I am using =gamestate= in three different div tags, which are each siblings and a child of the <div id="game". But I don't see a clear analogous situation in that simple example.
        - =board= displaying the rows
        - sending to Celebration
        - displaying the history.
      - [X] The answer is by /conditional rendering/ using the deconstructed values of =useQuery=.

End of "morning"
- [ ] Goal State:
  - [ ] your game has identical functionality, but all game state is managed by the server
  - [ ] game state persists if you refresh the tab, but not if you restart the server
merge to main

spin off to dev-multi-game

- [ ] Now we need to support multiple games.
- [ ] Add game ID to the GameState model
- [ ] Add game ID to /game and /move
- [ ] Add a list of games: GET /games and a create game endpoint: /create
- [ ] Now we need to allow a user to pick a game:
  - [ ] Add a new "pick/create game" component that displays initially
  - [ ] Once a game ID is selected, display the normal tic-tac-toe component
- [ ] Goal State:
  - [ ] your game allows users to join an existing game or start a new one
  - [ ] each tic-tac-toe game functions as normal (detects winners, ties, etc.)
  - [ ] states persist between chrome tab refreshes, but not server restarts
*** Questions

- [X] q :: What is this questionmark notation in  ~query.data?.map~ ? =query= is returned from ~useQuery~, so it seems to be a unique property? or is it built into javascript? I recall seeing something that used an exclamation mark as a part of the JS syntactical sugar, but I can't recall the details.
  - Optional chaining ?. is JavaScript. It safely accesses a property that might be undefined/null. query.data?.map runs only if query.data exists. The exclamation you remember is TypeScript’s non-null assertion (value!), not JavaScript.

** Day 4
